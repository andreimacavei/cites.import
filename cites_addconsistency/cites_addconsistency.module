<?php

class AddConsistency {

  private static $changes = array(
    "I/" => "i/",
    "COP" => "CoP",
    "AC-PC" => "ac-pc",
    "NC" => "nc",
    "PC" => "pc",
    "SC" => "sc",
    "ifs-" => "IFS-"
  );
  private static $correctExtensions = array(
    ".pdf", ".jpg", ".bmp", ".doc", ".docx", ".ppt", ".pptx", "gif", "bmp"
  );
  private static $possibleCorrectExtensions = array(
    ".html", ".shtml", ".php", ".html", ".phtml"
  );
  private static $specificCharacters = array(
    'fr' => array("d’", "l'", "L'", "ç"),
    'es' => array("¿", " y ", " el ", "ñ")
  );

  public function __construct() {
    ;
  }

  public function changeNodeAliases() {
    // get all basic page nodes
    $result = db_query("SELECT *
      FROM `node`
      WHERE `type` = 'page'");
    foreach ($result as $record) {
      $nodeObj = node_load($record->nid);
      // check if the requested object exists
      if (!$nodeObj) {
        continue;
      }
      $alias = drupal_lookup_path("alias", "node/" . $nodeObj->nid);
      echo $alias . PHP_EOL;
      $firstPartAlias = substr($alias, 0, 4);
      $secondPartAlias = substr($alias, 4);
      if ($firstPartAlias == "eng/") {
        $espPath = drupal_lookup_path("source", "esp/" . $secondPartAlias);
        $fraPath = drupal_lookup_path("source", "fra/" . $secondPartAlias);
        $espObj = menu_get_object("node", 1, $espPath);
        $fraObj = menu_get_object("node", 1, $fraPath);
        if ($espObj != FALSE) {
          $nodeObj->title_field['es'][0]['value'] = $espObj->title;
          $nodeObj->title_field['es'][0]['format'] = 'full_html';
          $nodeObj->body['es'][0]['value'] = $espObj->body[$espObj->language][0]['value'];
          $nodeObj->body['es'][0]['format'] = 'unfiltered_html';
          node_delete($espObj->nid);
        }
        if ($fraObj != FALSE) {
          $nodeObj->title_field['fr'][0]['value'] = $fraObj->title;
          $nodeObj->title_field['fr'][0]['format'] = 'full_html';
          $nodeObj->body['fr'][0]['value'] = $fraObj->body[$fraObj->language][0]['value'];
          $nodeObj->body['fr'][0]['format'] = 'unfiltered_html';
          node_delete($fraObj->nid);
        }
        $nodeObj->title_field['en'][0]['value'] = $nodeObj->title;
        $nodeObj->title_field['en'][0]['format'] = 'full_html';
        $nodeObj->body['en'][0]['value'] = $nodeObj->body[$nodeObj->language][0]['value'];
        $nodeObj->body['en'][0]['format'] = 'unfiltered_html';
        $nodeObj->path['alias'] = $secondPartAlias;
        $nodeObj->translate = 1;
        node_save($nodeObj);
      }
      else if ($firstPartAlias == "fra/") {
        $engPath = drupal_lookup_path("source", "eng/" . $secondPartAlias);
        $espPath = drupal_lookup_path("source", "esp/" . $secondPartAlias);
        $espObj = menu_get_object("node", 1, $espPath);
        $engObj = menu_get_object("node", 1, $engPath);
        if ($espObj != FALSE) {
          $nodeObj->title_field['es'][0]['value'] = $espObj->title;
          $nodeObj->title_field['es'][0]['format'] = 'full_html';
          $nodeObj->body['es'][0]['value'] = $espObj->body[$espObj->language][0]['value'];
          $nodeObj->body['es'][0]['format'] = 'unfiltered_html';
          node_delete($espObj->nid);
        }
        if ($engObj != FALSE) {
          $nodeObj->title_field['en'][0]['value'] = $engObj->title;
          $nodeObj->title_field['en'][0]['format'] = 'full_html';
          $nodeObj->body['en'][0]['value'] = $engObj->body[$engObj->language][0]['value'];
          $nodeObj->body['en'][0]['format'] = 'unfiltered_html';
          node_delete($engObj->nid);
        }
        $nodeObj->title_field['fr'][0]['value'] = $nodeObj->title;
        $nodeObj->title_field['fr'][0]['format'] = 'full_html';
        $nodeObj->path['alias'] = $secondPartAlias;
        $nodeObj->body['fr'][0]['value'] = $nodeObj->body[$nodeObj->language][0]['value'];
        $nodeObj->body['fr'][0]['format'] = 'unfiltered_html';
        $nodeObj->translate = 1;
        node_save($nodeObj);
      }
      else if ($firstPartAlias == "esp/") {
        $engPath = drupal_lookup_path("source", "eng/" . $secondPartAlias);
        $fraPath = drupal_lookup_path("source", "fra/" . $secondPartAlias);
        $engObj = menu_get_object("node", 1, $engPath);
        $fraObj = menu_get_object("node", 1, $fraPath);
        if ($engObj != FALSE) {
          $nodeObj->title_field['en'][0]['value'] = $engObj->title;
          $nodeObj->title_field['en'][0]['format'] = 'full_html';
          $nodeObj->body['en'][0]['value'] = $engObj->body[$engObj->language][0]['value'];
          $nodeObj->body['en'][0]['format'] = 'unfiltered_html';
          node_delete($engObj->nid);
        }
        if ($fraObj != FALSE) {
          $nodeObj->title_field['fr'][0]['value'] = $fraObj->title;
          $nodeObj->title_field['fr'][0]['format'] = 'full_html';
          $nodeObj->body['fr'][0]['value'] = $fraObj->body[$fraObj->language][0]['value'];
          $nodeObj->body['fr'][0]['format'] = 'unfiltered_html';
          node_delete($fraObj->nid);
        }
        $nodeObj->title_field['es'][0]['value'] = $nodeObj->title;
        $nodeObj->title_field['es'][0]['format'] = 'full_html';
        $nodeObj->path['alias'] = $secondPartAlias;
        $nodeObj->body['es'][0]['value'] = $nodeObj->body[$nodeObj->language][0]['value'];
        $nodeObj->body['es'][0]['format'] = 'unfiltered_html';
        $nodeObj->translate = 1;
        node_save($nodeObj);
      }
      else {
        $language = $this->detectLanguage($secondPartAlias, $nodeObj->body[LANGUAGE_NONE][0]['value']);
        $nodeObj->body[$language][0]['value'] = $nodeObj->body[LANGUAGE_NONE][0]['value'];
        $nodeObj->body[$language][0]['format'] = 'unfiltered_html';
        $nodeObj->title_field[$language][0]['value'] = $nodeObj->title;
        $nodeObj->title_field[$language][0]['format'] = 'full_html';
        node_save($nodeObj);
      }
    }
  }

  public function checkUrlsForNodes() {
    $pages = db_query("SELECT * FROM `node`
      WHERE `type` = 'page'");
    foreach ($pages as $page) {
      $nodeObj = node_load($page->nid);
      $content = $nodeObj->body[$nodeObj->language][0]['value'];
      $content = $this->changeUrlForTag($content, "img");
      $content = $this->changeUrlForTag($content, "a");
      $nodeObj->body[$nodeObj->language][0]['value'] = $content;

      $content = $nodeObj->body['en'][0]['value'];
      $content = $this->changeUrlForTag($content, "img");
      $content = $this->changeUrlForTag($content, "a");
      $nodeObj->body['en'][0]['value'] = $content;

      $content = $nodeObj->body['es'][0]['value'];
      $content = $this->changeUrlForTag($content, "img");
      $content = $this->changeUrlForTag($content, "a");
      $nodeObj->body['es'][0]['value'] = $content;

      $content = $nodeObj->body['fr'][0]['value'];
      $content = $this->changeUrlForTag($content, "img");
      $content = $this->changeUrlForTag($content, "a");
      $nodeObj->body['fr'][0]['value'] = $content;
      node_save($nodeObj);
    }
  }

  private function changeUrlForTag($resource, $tag) {
    $dom = new DOMDocument();
    libxml_use_internal_errors(true);
    $dom->loadHTML($resource);
    libxml_use_internal_errors(false);
    $xpath = new DOMXPath($dom);
    $srcs = $xpath->evaluate("//$tag");

    for ($i = 0; $i < $srcs->length; $i++) {
      $src = $srcs->item($i);
      switch ($tag) {
        case "a":
          $attribute = "href";
          break;
        case "img":
          $attribute = "src";
          break;
        case "embed":
          $attribute = "src";
          break;
        default:
          break;
      }
      $url = $src->getAttribute($attribute);
      if ($this->isInFileExtensions($url, AddConsistency::$correctExtensions) && strpos($url, "sites/default/files")) {
        $relUrl = substr($url, 1);
        if (!file_exists($relUrl)) {
          $newUrl = "/" . $this->changeUrl($relUrl);
        }
        else {
          $newUrl = $url;
        }
      }
      else {
        $newUrl = $url;
      }

      if ($this->isInFileExtensions($url, AddConsistency::$possibleCorrectExtensions) && substr($url, 0, 4) != "http" && !strpos($url, "#")) {
        $relUrl = substr($url, 1);
        if (!drupal_lookup_path("source", $relUrl)) {
          $newUrl = "/" . $this->changeUrlForHTMLFiles($relUrl);
        }
        else {
          $newUrl = $url;
        }
      }
      else {
        $newUrl = $url;
      }
      $src->removeAttribute($attribute);
      $src->setAttribute($attribute, $newUrl);
    }
    $content = preg_replace(array("/^\<\!DOCTYPE.*?<html><body>/si",
      "!</body></html>$!si"), '', $dom->saveHTML());
    return $content;
  }

  private function isInFileExtensions($url, $fileExtensions) {
    foreach ($fileExtensions as $extension)
      if (strpos($url, $extension))
        return TRUE;
    return FALSE;
  }

  private function changeUrl($url) {
    foreach (AddConsistency::$changes as $before => $after) {
      if (file_exists(str_replace($before, $after, $url))) {
        return str_replace($before, $after, $url);
      }
    }
    return $url;
  }

  private function changeUrlForHTMLFiles($url) {
    foreach (AddConsistency::$changes as $before => $after) {
      $path = str_replace($before, $after, $url);
      if (drupal_lookup_path("source", $path)) {
        return $path;
      }
    }
    return $url;
  }

  private function detectLanguage($path, $body) {
    if (strpos("/eng/", $path)) {
      return "en";
    }
    if (strpos("/fra/", $path)) {
      return "fr";
    }
    if (strpos("/esp/", $path)) {
      return "es";
    }
    foreach (AddConsistency::$specificCharacters as $language => $arrayOfPatterns) {
      foreach ($arrayOfPatterns as $pattern) {
        if (strpos($body, $pattern)) {
          return $language;
        }
      }
    }
    return "en";
  }

}
