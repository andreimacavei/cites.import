<?php

class DataImport {

  /**
   * array of extensions for static files
   */
  private static $correctFiles = array(
    'pdf',
    'gif',
    'jpeg',
    'jpg',
    'doc',
    'docx',
    'txt',
    'bmp',
    'png'
  );

  /**
   * array of extensions for dynamic files
   */
  private static $possibleCorrectFiles = array(
    'html',
    'phtml',
    'shtml',
    'php'
  );

  /**
   * contructor
   */
  public function __construct() {
    
  }

  /**
   * copy all static files to public://
   */
  public function copyStaticFiles($source) {
    $this->iterateDirectoryForStaticFiles($source);
  }

  /**
   * iterate through a directory, copy static file to public://
   * and keep the old structure
   */
  private function iterateDirectoryForStaticFiles($path) {
    $it = new RecursiveDirectoryIterator($path);

    foreach (new RecursiveIteratorIterator($it) as $file) {
      if ($file->isFile() && in_array($file->getExtension(), DataImport::$correctFiles)) {
        $filePath = drupal_realpath($file);
        $fileObj = (object) array(
              'uid' => 1,
              'uri' => $filePath,
              'filemime' => file_get_mimetype($filePath),
              'status' => 1
        );
        file_copy($fileObj, 'public://' . str_replace($path, "", $filePath), FILE_EXISTS_REPLACE);
      }
      else if ($file->isDir()) {
        if (!file_exists('public://' . str_replace($path, "", $file)))
          drupal_mkdir('public://' . str_replace($path, "", $file), 0777, TRUE);
      }
    }
  }

  /**
   * copy all .html, .php, .shtml files
   */
  public function copyHtmlFiles($path) {
    $this->iterateDirectoryForHtmlFiles($path);
  }

  /**
   *  iterate through a directory, generate html and create 
   *  page in drupal 
   */
  public function iterateDirectoryForHtmlFiles($path) {
    $it = new RecursiveDirectoryIterator($path);
    foreach (new RecursiveIteratorIterator($it) as $file)
      if ($file->isFile() && in_array($file->getExtension(), DataImport::$possibleCorrectFiles)) {
        $absolutePath = drupal_realpath($file);
        $result = array();
        exec("php $file 2> /dev/null", $result);
        $html = implode("\n", $result);
        $tidyDocument = $html;
        $title = $this->getTitleFromHtmlPage($tidyDocument);
        $content = $this->getContentOfDiv($tidyDocument,'main');
        if (empty($content)) $content = $this->getContentOfDiv($tidyDocument, 'milieu');
        if (empty($content)) $content = $this->getContentOfDiv($tidyDocument, 'mainContent');
        if (empty($content)) 
          echo "Incorrect file: " . $absolutePath . "\n";
        else if (strlen($content) < 20) {
          echo "Possible incorrect file (length less than 20): " . $absolutePath . "\n";
        }
        else {
          $alias = str_replace($path, "", $absolutePath);
          $this->addBasicPage($title, $content, $alias);
        }
      }
  }

  /**
   * get title of an html page
   */
  public function getTitleFromHtmlPage($resource) {
    $page = new DOMDocument();
    libxml_use_internal_errors(true);
    $page->loadHTML("$resource");
    libxml_use_internal_errors(false);
    return $page->getElementsByTagName("title")->item(0)->textContent;
  }

  /**
   * get content of div main 
   */
  public function getContentOfDiv($resource,$divId) {
    $page = new DOMDocument();
    libxml_use_internal_errors(true);
    $page->loadHTML("$resource");
    libxml_use_internal_errors(false);
    return $page->getElementById($divId)->textContent;
  }

  /**
   * add basic page in drupal
   */
  private function addBasicPage($title, $content, $alias) {
  $newnode = new stdClass();
  $newnode->title = "$title";
  $newnode->body =array('und'=>array(array('value'=> "$content")));
  $newnode->path['alias'] = $alias;
  $newnode->language = 'en';
  global $user;

  $newnode->uid = $user->uid;
  $newnode->name = $user->name;
  $newnode->type = 'page';    
  $newnode->status = 1;     
  $newnode->promote = 0;
  $newnode = node_submit( $newnode );
  node_save( $newnode ); 
  }

}
