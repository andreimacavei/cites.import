<?php

class DataImport {

  /**
   * array of extensions for correct files
   */
  private static $correctFiles = array(
    'pdf', 'PDF',
    'gif', 'GIF',
    'jpeg', 'JPEG',
    'jpg', 'JPG',
    'doc', 'DOC',
    'docx', 'DOCX',
    'txt', 'TXT',
    'bmp', 'BMP',
    'png', 'PNG'
  );

  /**
   * array of extensions for possible correct files
   */
  private static $possibleCorrectFiles = array(
    'html', 'HTML',
    'phtml', 'PHTML',
    'shtml', 'SHTML',
    'php', 'PHP'
  );
  
  /**
   *
   * patterns for filenames that should not be included as pages
   */
  private static $unusedFiles = array(
    'footer',
    'header'
  );


  /**
   * copy all static files to public://
   * @param $path - path to the directory that contains static files
   */
  public function copyStaticFiles($path) {
    $this->iterateDirectoryForStaticFiles($path);
  }

  /**
   * iterate through a directory, copy static file to public://
   * and keep the old structure of the tree
   * @param $path - path to the directory that contains static files
   */
  private function iterateDirectoryForStaticFiles($path) {
    $extensions = implode("|", DataImport::$correctFiles);
    $files = file_scan_directory("$path", "/^.*\.($extensions)$/", array(
      'recurse' => TRUE
        )
    );

    foreach ($files as $fileObj) {
      $filePath = str_replace($path, "", $fileObj->uri);
      $baseName = basename($fileObj->uri);
      $dirPath = str_replace($baseName, "", $filePath);
      $dirPath = "public://" . $dirPath;
      file_prepare_directory($dirPath, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS);
      $destinationObj = (object) array(
            'uid' => 1,
            'uri' => drupal_realpath($fileObj->uri),
            'filemime' => file_get_mimetype($fileObj->uri),
            'status' => 1
      );
      if (!file_copy($destinationObj, "public://" . $filePath, FILE_EXISTS_ERROR))
        echo "Error copying $filePath to public://$filePath \n";
    }
  }

  /**
   * copy all .html, .php, .shtml files
   * @param $path - absolute path to directory that contains all html files
   */
  public function copyHtmlFiles($path) {
    $this->iterateDirectoryForHtmlFiles($path);
  }

  /**
   * iterate through a directory, generate html and create 
   * page in drupal
   * @param $path - path to the html resource
   */
  public function iterateDirectoryForHtmlFiles($path) {
    $it = new RecursiveDirectoryIterator($path);
    foreach (new RecursiveIteratorIterator($it) as $file)
      if ($file->isFile() && in_array($file->getExtension(), DataImport::$possibleCorrectFiles)) {
        $absolutePath = drupal_realpath($file);
        if ($this->checkIsUnused($absolutePath))
          continue;
        $result = array();
        exec("php $file 2> /dev/null", $result);
        $html = implode("\n", $result);
        $tidyDocument = $html;
        
        // clean the html page with tidy html functionality
        // check if all tags are closed
        $tidyConfig = array(
          'clean' => true,
          'input-xhtml' => true,
          'output-xhtml' => true, 
          'show-body-only' => false, 
          'wrap' => 0, 
        );
        $tidyDocument = tidy_parse_string($html, $tidyConfig, 'UTF8');
        $tidyDocument->cleanRepair();
        
        echo "Parsing " . $absolutePath . "file\n";
        
        $title = $this->getTitleFromHtmlPage($tidyDocument);
        $content = $this->getContentOfDiv($tidyDocument, 'main');
        if (empty($content))
          $content = $this->getContentOfDiv($tidyDocument, 'milieu');
        if (empty($content))
          $content = $this->getContentOfDiv($tidyDocument, 'mainContent');
        if (empty($content))
          echo "Incorrect file: " . $absolutePath . "\n";
        else if (strlen($content) < 20) {
          echo "Possible incorrect file (length less than 20): " . $absolutePath . "\n";
        }
        else {
          $alias = str_replace($path, "", $absolutePath);
          $this->addBasicPage($title, $content, $alias);
        }
      }
  }

  /**
   * get title of an html page
   * @param $resource - html page
   * @return string - title of the page
   */
  public function getTitleFromHtmlPage($resource) {
    $page = new DOMDocument();
    $page->loadHTML("$resource", LIBXML_NONET);
    return $page->getElementsByTagName("title")->item(0)->textContent;
  }

  /**
   * Get content of a div specified by id
   * @param $resource - html resource
   * @param $divId - divId
   * @return string - content of the div if it exists
   */
  public function getContentOfDiv($resource, $divId) {
    $dom = new DOMDocument;
    libxml_use_internal_errors(true);
    $dom->loadHTML($resource);
    $main = null;
    $main = $dom->getElementById($divId);
    $html = '';
    if ($main == null)
      return "";
    foreach ($main->childNodes as $node) {
      $html .= $dom->saveXML($node,LIBXML_NOEMPTYTAG); 
    }
    libxml_use_internal_errors(false);
    return $html;
  }

  /**
   * Add a basic page 
   * @param $title - title of the page 
   * @param $content - content of the page
   * @param $alias - url alias
   */
  private function addBasicPage($title, $content, $alias) {
    $node = new stdClass(); // Create a new page
    $node->type = "page"; 
    node_object_prepare($node); 

    $node->title = "{$title}";
    $node->language = LANGUAGE_NONE; 

    $node->uid = 1; // UID of the author of the page 

    $node->body[$node->language][0]['value'] = $content;
    $node->body[$node->language][0]['summary'] = text_summary($content);
    $node->body[$node->language][0]['format'] = 'full_html';

    $path = 'node_created_on' . date('YmdHis');
    $node->path = array('alias' => $alias);

    if ($node = node_submit($node))  // Prepare node for saving
      node_save($node);
  }
  
  /**
   * 
   * Check if file should be included as page or not(footers should not 
   * be included as pages) 
   * @param $path - absolute path that should be checked
   * @return boolean
   */
  private function checkIsUnused($path){
    foreach (DataImport::$unusedFiles as $value) {
      if (preg_match("/$value/i", $path))
          return true;
    }
    return false;
  }

}
