<?php

class DataImport {

  /**
   * array of extensions for correct files
   */
  private static $correctFiles = array(
    'pdf', 'PDF',
    'gif', 'GIF',
    'jpeg', 'JPEG',
    'jpg', 'JPG',
    'doc', 'DOC',
    'docx', 'DOCX',
    'txt', 'TXT',
    'bmp', 'BMP',
    'png', 'PNG',
    'ppt', 'PPT',
    'pptx', 'PPTX',
    'swf', 'SWF',
    'mp3', 'MP3',
    'mp4', 'MP4',
    'fla', 'FLA'
  );

  /**
   * array of extensions for possible correct files
   */
  private static $possibleCorrectFiles = array(
    'html', 'phtml',
    'shtml', 'php');

  /**
   *
   * patterns for filenames that should not be included as pages
   */
  private static $unusedFiles = array(
    'footer',
    'header'
  );

  /**
   *
   * blacklist for files/directories that should not be included
   */
  private static $blackList = array(
    "admin/", "cms/", "forum/", "forum_old",
    "forum_phpbb/", "js/", "listserver/", "mac/",
    "new/", "nivo/", "phpmyadmin/", "style/", "yui/",
    ".vim/", "index0.php", "index.php.LCK",
    "jquery.nivo.slider.js", "google.html",
    "404.php", "500.php", "blank_index.html",
    "favicon.ico", "htaccess", "listserver.tar.gz",
    "mysql_all.sql", "slide.", ".viminfo"
  );

  /**
   * path for public files in drupal 
   */
  private static $publicFilesPath = "/sites/default/files";

  /**
   * check if a path is in blacklist
   * @param $path - path to be checked
   * @return boolean
   */
  private function isInBlackList($path) {
    foreach (DataImport::$blackList as $blackElement) {
      if (strpos($path, $blackElement) !== false) {
        return true;
      }
    }
    return false;
  }

  /**
   * copy all static files to public://
   * @param $path - path to the directory that contains static files
   */
  public function copyStaticFiles($path) {
    $this->iterateDirectoryForStaticFiles($path);
  }

  /**
   * iterate through a directory, copy static file to public://
   * and keep the old structure of the tree
   * @param $path - path to the directory that contains static files
   */
  private function iterateDirectoryForStaticFiles($path) {
    $extensions = implode("|", DataImport::$correctFiles);
    $files = file_scan_directory("$path", "/^.*\.($extensions)$/", array(
      'recurse' => TRUE
        )
    );

    foreach ($files as $fileObj) {
      if ($this->isInBlackList($fileObj->uri))
        continue;
      echo "Copying {$fileObj->uri} file" . PHP_EOL;
      $filePath = str_replace($path, "", $fileObj->uri);
      $baseName = basename($fileObj->uri);
      $dirPath = str_replace($baseName, "", $filePath);
      $dirPath = "public://" . $dirPath;
      file_prepare_directory($dirPath, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS);
      $destinationObj = (object) array(
            'uid' => 1,
            'uri' => drupal_realpath($fileObj->uri),
            'filemime' => file_get_mimetype($fileObj->uri),
            'status' => 1
      );
      if (!file_copy($destinationObj, "public:/" . $filePath, FILE_EXISTS_ERROR))
        echo "Error copying $filePath to public:/$filePath" . PHP_EOL;
    }
  }

  /**
   * copy all .html, .php, .shtml files
   * @param $path - absolute path to directory that contains all html files
   */
  public function copyHtmlFiles($path) {
    $this->iterateDirectoryForHtmlFiles($path);
  }

  /**
   * iterate through a directory, generate html and create 
   * page in drupal
   * @param $path - path to the html resource
   */
  public function iterateDirectoryForHtmlFiles($path) {
    $it = new RecursiveDirectoryIterator($path);
    foreach (new RecursiveIteratorIterator($it) as $file)
      if ($file->isFile() && in_array(strtolower($file->getExtension()), DataImport::$possibleCorrectFiles)) {
        $absolutePath = drupal_realpath($file);
        if ($this->isInBlackList($absolutePath))
          continue;
        $fileName = basename($file);
        if ($this->checkIsUnused($absolutePath))
          continue;
        $result = array();
        $this->changeEncoding($file);
        exec("php $file 2> /dev/null", $result);
        $html = implode("\n", $result);
        $tidyDocument = $html;

        // clean the html page with tidy html functionality
        // check if all tags are closed
        $tidyConfig = array(
          'clean' => true,
          'input-xhtml' => true,
          'output-xhtml' => true,
          'show-body-only' => false,
          'wrap' => 0,
        );
        $tidyDocument = tidy_parse_string($html, $tidyConfig, 'UTF8');
        $tidyDocument->cleanRepair();

        $title = $this->getTitleFromHtmlPage($tidyDocument);
        if (empty($title)) {
          // set title to 'UNKNOWN TITLE' if it is empty
          $title = "UNKNOWN TITLE";
        }
        $content = "";
        $main = $this->getContentOfDiv($tidyDocument, 'main');
        if (!empty($main))
          $content .= "<div id='main'>" . $main . "</div>";

        $milieu = $this->getContentOfDiv($tidyDocument, "milieu");
        if (!empty($milieu))
          $content .= "<div id='milieu'>" . $milieu . "</div>";

        $mainContent = $this->getContentOfDiv($tidyDocument, "mainContent");
        if (!empty($mainContent))
          $content .= "<div id='mainContent'>" . $mainContent . "</div>";

        if (empty($content))
          $content = $this->getContentOfBody($tidyDocument);

        if (empty($content))
          echo "Incorrect file: " . $absolutePath . PHP_EOL;
        else if (strlen($content) < 20) {
          echo "Possible incorrect file (length less than 20): " . $absolutePath . PHP_EOL;
        }
        else {
          //check to see if content has � characters
          if (strpos($title, "�")) {
            echo "File $absolutePath (title) contains at least one character �" . PHP_EOL;
          }
          if (strpos($content, "�")) {
            echo "File $absolutePath (content) contains at least one character �" . PHP_EOL;
          }
          $alias = str_replace($path, "", $absolutePath);
          // change href attribute for anchors
          $content = $this->changeUrlForTag($content, "a", str_replace($fileName, "", $alias));
          // change src attribute for imgs
          $content = $this->changeUrlForTag($content, "img", str_replace($fileName, "", $alias));
          // change src attribute for embed
          $content = $this->changeUrlForTag($content, "embed", str_replace($fileName, "", $alias));
          $content = preg_replace(array("/^\<\!DOCTYPE.*?<html><body>/si",
            "!</body></html>$!si"), "", $content);
          $this->addBasicPage($title, $content, $alias);
        }
     }
  }
 

  /**
   * get title of an html page
   * @param $resource - html page
   * @return string - title of the page
   */
  public function getTitleFromHtmlPage($resource) {
    $page = new DOMDocument();
    $string = $resource;
    libxml_use_internal_errors(true);
    $page->loadHTML('<?xml encoding="UTF-8" ?>' . $resource);
    libxml_use_internal_errors(false);
    return $page->getElementsByTagName("title")->item(0)->textContent;
  }

  /**
   * Get content of a div specified by id
   * @param $resource - html resource
   * @param $divId - divId
   * @return string - content of the div if it exists
   */
  public function getContentOfDiv($resource, $divId) {
    $dom = new DOMDocument();
    libxml_use_internal_errors(true);
    $dom->loadHTML('<?xml encoding="UTF-8" ?>' . $resource);
    $main = null;
    $main = $dom->getElementById($divId);
    $html = '';
    if ($main == null)
      return "";
    foreach ($main->childNodes as $node) {
      $html .= preg_replace(array("/^\<\!DOCTYPE.*?<html><body>/si",
        "!</body></html>$!si"), "", $dom->saveHTML($node));
    }
    libxml_use_internal_errors(false);
    $content = preg_replace(array("/^\<\!DOCTYPE.*?<html><body>/si",
      "!</body></html>$!si"), "", $html);
    return $content;
  }

  private function getContentOfBody($resource) {
    $dom = new DOMDocument();
    $mock = new DOMDocument();
    libxml_use_internal_errors(true);
    $dom->loadHTML('<?xml encoding="UTF-8" ?>' . $resource);
    libxml_use_internal_errors(false);
    $body = $dom->getElementsByTagName('body')->item(0);
    foreach ($body->childNodes as $child) {
      $mock->appendChild($mock->importNode($child, true));
    }
    $content = preg_replace(array("/^\<\!DOCTYPE.*?<html><body>/si",
      "!</body></html>$!si"), "", $mock->saveHTML());
    return $content;
  }

  /**
   * Add a basic page 
   * @param $title - title of the page 
   * @param $content - content of the page
   * @param $alias - url alias
   */
  private function addBasicPage($title, $content, $alias) {
    $node = new stdClass(); // Create a new page
    $node->type = "page";
    node_object_prepare($node);

    $node->title = "{$title}";
    $node->language = LANGUAGE_NONE;

    $node->uid = 1; // UID of the author of the page 

    $content = preg_replace(array("/^\<\!DOCTYPE.*?<html><body>/si",
      "!</body></html>$!si"), "", $content);
    $node->body[$node->language][0]['value'] = $content;
    $node->body[$node->language][0]['format'] = 'full_html'; //full_html

    $path = 'node_created_on' . date('YmdHis');
    $node->path = array('alias' => $alias);

    if ($node = node_submit($node))  // Prepare node for saving
      node_save($node);
  }

  /**
   * 
   * Check if file should be included as page or not(example: footers should not 
   * be included as pages) 
   * @param $path - absolute path that should be checked
   * @return boolean
   */
  private function checkIsUnused($path) {
    foreach (DataImport::$unusedFiles as $value) {
      if (preg_match("/$value/i", $path))
        return true;
    }
    return false;
  }

  /**
   * Change url alias for url 
   * @param $resource - html string that will be modified
   * @param $dirPath - path of the directory where is located the file
   * <a href = "../../image.jpg"> and dirPath = http://cites.localhost/eng/disc/production> 
   * => <a href = "http://cites.localhost/eng/disc/production/../../image.jpg>
   */
  public function changeUrl($dirPath, $path) {
    return DataImport::$publicFilesPath . "/" . $dirPath . $path;
  }

  /**
   * check if a filename has extensions such as PDF,JPG,JPEG,BMP,GIF 
   * @param $path - path of the file
   * @return boolean
   */
  private function checkIsCorrectFile($path) {
    $pathArray = explode("/", $path);
    $n = count($pathArray);
    if ($n <= 0)
      return FALSE;
    $fileArray = explode(".", $pathArray[$n - 1]);
    return in_array($fileArray[count($fileArray) - 1], DataImport::$correctFiles);
  }

  /**
   * change the attribute url for a specified tag
   * @param $resource - html page
   * @param $tag - tag whose attribute is changed
   * @param $dirPath - directory page where is located the html page
   * @return - new html page with attributes of the specified tag changed
   */
  private function changeUrlForTag($resource, $tag, $dirPath) {
    $dom = new DOMDocument();
    libxml_use_internal_errors(true);
    $dom->loadHTML('<?xml encoding="UTF-8" ?>' . $resource);
    libxml_use_internal_errors(false);
    $xpath = new DOMXPath($dom);
    $srcs = $xpath->evaluate("/html/body//$tag");

    for ($i = 0; $i < $srcs->length; $i++) {
      $src = $srcs->item($i);
      if ($tag == "a")
        $attribute = "href";
      else if ($tag == "img")
        $attribute = "src";
      else if ($tag == "embed")
        $attribute = "src";
      $url = $src->getAttribute($attribute);

      if ($this->checkIsCorrectFile($url) && substr($url, 0, 7) !== "http://" &&
          substr($url, 0, 8) !== "https://" &&
          substr($url, 0, 4) !== "www." && $url[0] !== "/")
        $newUrl = $this->changeUrl($dirPath, $url);
      else if ($url[0] === "/")
        $newUrl = "/sites/default/files" . $url;
      else
        $newUrl = $url;
      //remove and set correct attribute       
      $src->removeAttribute($attribute);
      $src->setAttribute($attribute, $newUrl);
    }

    $content = preg_replace(array("/^\<\!DOCTYPE.*?<html><body>/si",
      "!</body></html>$!si"), '', $dom->saveHTML());
    return $content;
  }

  
  private function changeEncoding(&$file){ 
    $encodes = array("ASCII","UTF-8","ISO-8859-1","WINDOWS-1252");
    $rez = mb_detect_encoding(file_get_contents($file),$encodes);
    if (!$rez) {
      //echo "Could not detect encoding for " . realpath($file) . PHP_EOL;
      $tmpFile = realpath($file) . ".tmp";
      exec("iconv -t WINDOWS-1252 -f UTF-8 $file > $tmpFile");
      if (mb_detect_encoding(file_get_contents($tmpFile),$encodes) == false) {
        //exec("iconv -t ISO-8859-1 -f UTF-8 $file > $tmpFile");
      }
      file_put_contents($file, file_get_contents($tmpFile));
      unlink($tmpFile);
    }
    else {
      if ($rez == 'WINDOWS-1252') {
        // change from WINDOWS-1252 to UTF-8
        exec("iconv -t WINDOWS-1252 -f UTF-8 $file > $file");
      }
      else if ($rez == 'ISO-8859-1'){
        // change from ISO-8859-1 to UTF-8
        exec("iconv -t ISO-8859-1 -t UTF-8 $file > $file");
      }  
    }  
  }
}

