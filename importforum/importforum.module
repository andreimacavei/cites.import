<?php

class ForumManagement {

  private static $forumDictionary = array(
    11 => array("Feedback Manager", "Feedback Member", "Feedback Visitor"),
    16 => array("Plants Committee Manager", "Plants Committee Member", "Plants Commitee Visitor"),
    17 => array("Animals Committee Manager", "Animals Commitee Member", "Animal Commitee Visitor"),
    18 => array("Standing Committee Manager", "Standing Commitee Member", "Standing Commitee Visitor"),
    57 => array("Substantive Revision Manager", "Substantive Revision Member", "Substantive Revision Visitor"),
    58 => array("Private Sector Manager", "Private Sector Member", "Private Sector Visitor"),
    29 => array("Asian Region Manager", "Asian Region Member", "Asian Region Visitor"),
    30 => array("Management Authorities Manager", "Management Authorities Member", "Management Authorities Visitor"),
    31 => array("Scientific Authorities Manager", "Scientific Authorities Member", "Scientific Authorities Visitor"),
    33 => array("Enforcement Authorities Manager", "Enforcement Authorities Member", "Enforcement Authorities Visitor"),
    62 => array("Central & South America Manager", "Central & South America Member", "Central & South America Visitor"),
    35 => array("Africa Manager", "Africa Member", "Africa Visitor"),
    36 => array("Oceania Manager", "Oceania Member", "Oceania Visitor"),
    37 => array("North America Manager", "North America Member", "North America Visitor"),
    38 => array("Europe Manager", "Europe Member", "Europe Visitor"),
    39 => array("Wildlife Trade Manager", "Wildlife Trade Member", "Wildlife Trade Visitor"),
    64 => array("WG on criteria Manager", "WG on criteria Member", "WG on criteria Visitor"),
    51 => array("Finance & Budget Manager", "Finance & Budget Member", "Finance & Budget Visitor"),
    52 => array("CITES and livelihoods Manager", "CITES and livelihoods Member", "CITES and livelihoods Visitor"),
    54 => array("Purpose Codes WG Manager", "Purpose Codes WG Member", "Purpose Codes WG Visitor"),
    55 => array("Review of Resolutions WG Manager", "Review of Resolutions WG Member", "Review of Resolutions WG Visitor"),
    61 => array("E-commerce Manager", "E-commerce Member", "E-commerce Visitor"),
    65 => array("SC WG on Trade Manager", "SC WG on Trade Member", "SC WG on Trade Visitor"),
    66 => array("Tortoises & Freshwater Manager", "Tortoises & Freshwater Member", "Tortoises & Freshwater Visitor"),
    70 => array("Advisory WG on Review Manager", "Advisory WG on Review Member", "Advisory WG Visitor"),
    68 => array("Strategic Vision WG Manager", "Strategic Vision WG Member", "Strategic Vision WG Visitor"),
    69 => array("WG on the revision Manager", "WG on the revision Member", "WG on the revision Visitor"),
    71 => array("CITES logo Manager", "CITES logo Member", "CITES logo Visitor"),
    73 => array("Forum Announcements Manager", "Forum Announcements Member", "Forum Announcements Visitor"),
    56 => array("Trade Database Users Manager", "Trade Database Users Member", "Trade Databse User Visitor"),
    49 => array("Timber identification Manager", "Timber identification Member", "Timber identification Visitor")
  );
  private $forumVid;
  private $dataBaseObj;
  private $counter = 1;
  private $destinationFolder;
  private $pathToAttachments;
  private $strangeUsers;

  public function __construct(DatabaseInterface $databaseObj, $pathToAttach = "/home/andrei/Desktop/cites.production.
    arhive/cites.production/forum/asserts/files/") {
    $this->dataBaseObj = $databaseObj;
    $this->forumVid = 0;
    $this->pathToAttachments = $pathToAttach;
    if ($this->pathToAttachments[strlen($this->pathToAttachments)] != "/")
      $this->pathToAttachments .= "/";
    $forum = taxonomy_vocabulary_machine_name_load('forums');
    $this->forumVid = $forum->vid;

    $dirPath = "public://privateFolder/forum_attachments/";
    $result = file_prepare_directory($dirPath, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS);
    if (!$result)
      throw new Exception("Cannot create directory to put attachments" . PHP_EOL);
    echo "Forum attachments will be put in " . $dirPath . PHP_EOL;
    $this->destinationFolder = $dirPath;

    $result = $this->dataBaseObj->getAllUsers();
    while ($row = mysql_fetch_object($result)) {
      $this->strangeUsers[$row->email][] = $row->user_id;
    }
  }

  public function addUsers() {
    $result = $this->dataBaseObj->getUsers();
    while ($row = mysql_fetch_object($result)) {
      $this->insertUser($row);
    }
  }

  /**
   * insert an user
   * @param $username
   * @param $password
   * @param $email
   */
  private function insertUser($user) {
    $fields = array(
      'name' => $user->user,
      'mail' => $user->email,
      'pass' => $user->real_pass,
      'status' => 1,
      'init' => $user->email,
      'roles' => array(
        DRUPAL_AUTHENTICATED_RID => 'authenticated user',
      ),
    );

    try {
      $account = user_save('', $fields);
      // get profile2 object
      $profile = profile_create(array('user' => $account, 'type' => 'extendedprofile'));
      $profile->field_firstname[LANGUAGE_NONE][0]['value'] = $user->firstname;
      $profile->field_lastname[LANGUAGE_NONE][0]['value'] = $user->lastname;
      $profile->field_organization[LANGUAGE_NONE][0]['value'] = $user->organization;
      $profile->field_telephone[LANGUAGE_NONE][0]['value'] = $user->telephone;
      // save profile
      if (count($this->strangeUsers[$user->email]) > 1) {
        echo $user->firstname . " " . $user->lastname . " " . $user->email . " has multiple identities: {$user->user_id}, ";
        foreach ($this->strangeUsers[$user->email] as $user_id) {
          if ($user_id != $user->user_id) {
            echo $user_id . ", ";
            $duplicateUser = mysql_fetch_object($this->dataBaseObj->getUser($user_id));
            if (!$duplicateUser)
              continue;
            if ($profile->field_organization[LANGUAGE_NONE][0]['value'] != $duplicateUser->organization) {
              $profile->field_organization[LANGUAGE_NONE][0]['value'] .= ",{$duplicateUser->organization}";
            }
            if ($profile->field_telephone[LANGUAGE_NONE][0]['value'] != $duplicateUser->telephone) {
              $profile->field_telephone[LANGUAGE_NONE][0]['value'] .= ",{$duplicateUser->telephone}";
            }
          }
        }
        echo PHP_EOL;
      }
      profile2_save($profile);
    } catch (Exception $e) {
      echo $e->getMessage() . PHP_EOL;
    }
  }

  public static function updateUser($username, $password, $email) {
    $userObj = user_load_by_mail($email);
    $userDuplicate = user_load_by_name($username);
    if ($userObj->uid != $userDuplicate->uid)
      $username .= rand(10, 99);
    if (is_null($userObj)) {
      $fields = array(
        'name' => $username,
        'mail' => $email,
        'pass' => $password,
        'status' => 1,
        'init' => $username,
        'roles' => array(
          DRUPAL_AUTHENTICATED_RID => 'authenticated user',
        ),
      );
      $account = user_save($userObj);
      $profile = profile_create(array('user' => $account, 'type' => 'extendedprofile'));
      $profile->field_firstname[LANGUAGE_NONE][0]['value'] = '';
      $profile->field_lastname[LANGUAGE_NONE][0]['value'] = '';
      $profile->field_organization[LANGUAGE_NONE][0]['value'] = '';
      $profile->field_telephone[LANGUAGE_NONE][0]['value'] = '';
      profile2_save($profile);
    }
    return $userObj;
  }

  private function addComment($post, $nodeId, $user) {
    $comment = new stdClass();
    $comment->nid = $nodeId; // nid of a node you want to attach a comment to
    $comment->cid = 0;
    $comment->pid = 0; // parent comment id, 0 if none

    $userAccount = user_load_by_name($user->user);
    if ($userAccount)
      $comment->uid = $userAccount->uid;
    else
      $comment->uid = 1; // user's id, who left the comment
    $comment->created = strtotime($post->data);
    $comment->changed = strtotime($post->data);
    $comment->is_anonymous = 0;
    $comment->status = COMMENT_PUBLISHED;
    $comment->language = LANGUAGE_NONE;
    $comment->subject = $post->pname;
    $comment->comment_body[$comment->language][0]['value'] = $post->description;
    $comment->comment_body[$comment->language][0]['format'] = 'filtered_html';
    $result = $this->dataBaseObj->getPostsFiles($post->post_id);
    try {
      while ($row = mysql_fetch_object($result)) {
        if (empty($row->filename))
          continue;
        if (!file_exists($this->pathToAttachments . $row->filename))
          continue;
        $fileName = $this->pathToAttachments . $row->filename;
        $file_path = drupal_realpath($fileName);
        $file = (object) array(
              'fid' => $this->counter,
              'display' => 1,
              'uid' => 1,
              'uri' => $file_path,
              'filemime' => file_get_mimetype($file_path),
              'status' => 1,
        );
        $this->counter++;
        $destinationPath = $this->destinationFolder;
        echo $row->filename . PHP_EOL;
        if (file_exists($destinationPath . $row->filename)) {
          $uri = $destinationPath . $row->filename;
          $files = file_load_multiple(array(), array('uri' => $uri));
          $file = reset($files);
          $file->display = 1;
        }
        else {
          $file = file_copy($file, $destinationPath . $row->filename, FILE_EXISTS_REPLACE);
        }

        if (!is_null($file))
          $comment->field_comment_attachment[LANGUAGE_NONE][] = (array) $file;
      }
      comment_save($comment);
    } catch (Exception $e) {
      echo $e->getMessage() . PHP_EOL;
    }
  }

  private function addTopic($topic, $forumTaxonomyId) {
    $node = new stdClass();
    $title = $topic->cname;
    $encoding = mb_detect_encoding($title);
    if ($encoding === 'ISO-8859-1') {
      $title = iconv('ISO-8859-1', 'UTF-8', $title);
    }
    else if ($encoding === 'WINDOWS-1252') {
      $title = iconv('WINDOWS-1252', 'UTF-8', $title);
    }
    else if ($encoding != 'ASCII' && $encoding != 'LATIN-1') {
      $title = iconv('UTF-8', 'UTF-8', $title);
    }
    $node->title = $title;
    $node->type = 'forum';   // Your specified content type
    $node->created = strtotime($topic->datetime);
    $node->changed = strtotime($topic->datetime);
    $node->status = 1;       // To have published, else use 0
    $node->promote = 1;      // If you want promoted to front page, else use 0
    $node->sticky = 0;
    $node->format = 1;       // Filtered HTML
    $node->uid = 1;          // UID of content owner
    $node->language = LANGUAGE_NONE;
    $node->comment = COMMENT_NODE_OPEN;
    $node->taxonomy_forums[$node->language][0]['tid'] = $forumTaxonomyId;
    $result = $this->dataBaseObj->getPosts($topic->categ_id);

    if ($u = mysql_fetch_object($result)) {
      $userResult = $this->dataBaseObj->getUser($u->user_id);
      $user = mysql_fetch_object($userResult);
      $node = $this->completeTopic($node, $u, $user);
    }
    node_save($node);
    while ($u = mysql_fetch_object($result)) {
      $userResult = $this->dataBaseObj->getUser($u->user_id);
      $user = mysql_fetch_object($userResult);
      $this->addComment($u, $node->nid, $user);
    }
  }

  private function completeTopic($topic, $post, $user) {
    $topic->body[$topic->language][0]['value'] = $post->description;
    $topic->body[$topic->language][0]['format'] = 'filtered_html';
    $userAccount = user_load_by_name($user->user);
    if ($userAccount)
      $topic->uid = $userAccount->uid;
    else
      $topic->uid = 1; // user's id, who left the comment
    $result = $this->dataBaseObj->getPostsFiles($post->post_id);

    try {
      while ($row = mysql_fetch_object($result)) {
        if (empty($row->filename))
          continue;
        if (!file_exists($this->pathToAttachments . $row->filename))
          continue;
        $fileName = $this->pathToAttachments . $row->filename;
        $file_path = drupal_realpath($fileName);
        $file = (object) array(
              'fid' => $this->counter,
              'display' => 1,
              'uid' => 1,
              'uri' => $file_path,
              'filemime' => file_get_mimetype($file_path),
              'status' => 1,
        );
        $this->counter++;
        $destinationPath = $this->destinationFolder;
        echo $row->filename . PHP_EOL;
        if (file_exists($destinationPath . $row->filename)) {
          $uri = $destinationPath . $row->filename;
          $files = file_load_multiple(array(), array('uri' => $uri));
          $file = reset($files);
          $file->display = 1;
        }
        else {
          $file = file_copy($file, $destinationPath . $row->filename, FILE_EXISTS_REPLACE);
        }

        if (!is_null($file))
          $topic->field_topic_attachment[LANGUAGE_NONE][] = (array) $file;
      }
    } catch (Exception $e) {
      echo $e->getMessage() . PHP_EOL;
    }
    return $topic;
  }

  /**
   * add forum as taxonomy
   */
  private function addSingleForum($forum) {
    taxonomy_term_save((object) array(
          'vid' => $this->forumVid,
          'name' => $forum->gname, // "$forumName"
          'description' => ""
    ));
    $value = taxonomy_get_term_by_name($forum->gname);
    $val = reset($value)->tid;
    $topics = $this->dataBaseObj->getTopics($forum->group_id);
    while ($row = mysql_fetch_object($topics)) {
      $this->addTopic($row, $val);
    }
  }

  public function addForums() {
    $forums = $this->dataBaseObj->getForums();
    while ($row = mysql_fetch_object($forums)) {
      $this->addSingleForum($row);
    }
  }

  public function addRoles() {
    foreach (ForumManagement::$forumDictionary as $key => $value) {
      $this->createRole($key);
    }
  }

  public function createRole($id) {
    // create Forum Manager Role
    $forum = mysql_fetch_object($this->dataBaseObj->getForum($id));
    $taxonomyTermArray = taxonomy_get_term_by_name($forum->gname);
    if (empty($taxonomyTermArray)) {
      return;
    }
    $taxonomyTerm = reset($taxonomyTermArray);
    $managerRoleName = ForumManagement::$forumDictionary[$id][0];
    $role = new stdClass();
    $role->name = $managerRoleName;
    user_role_save($role);
    $role = user_role_load_by_name($managerRoleName);
    $manager_permissions = array(
    );
    user_role_change_permissions($role->rid, $manager_permissions);
    $this->asPermissions($taxonomyTerm->tid, $role->rid, 1, 1, 1, 1);

    // create Forum Member role
    $memberRoleName = ForumManagement::$forumDictionary[$id][1];
    $role = new stdClass();
    $role->name = $memberRoleName;
    user_role_save($role);
    $role = user_role_load_by_name($memberRoleName);
    $member_permissions = array(
    );
    user_role_change_permissions($role->rid, $member_permissions);
    $this->grantPermissions($taxonomyTerm->tid, $role->rid, 1, 0, 0, 1);
    // create Forum Visitor role
    $visitorRoleName = ForumManagement::$forumDictionary[$id][2];
    $role = new stdClass();
    $role->name = $visitorRoleName;
    user_role_save($role);
    $role = user_role_load_by_name($visitorRoleName);
    $visitor_permissions = array(
    );
    user_role_change_permissions($role->rid, $visitor_permissions);
    $this->grantPermissions($taxonomyTerm->tid, $role->rid, 1, 0, 0, 0);
  }

  public function deleteRoles() {
    foreach (ForumManagement::$forumDictionary as $forumRoles) {
      foreach ($forumRoles as $role) {
        user_role_delete($role);
      }
    }
  }

  public function assignRolesToUsers() {
    $result = $this->dataBaseObj->getGroupSubscriptions();
    while ($row = mysql_fetch_object($result)) {
      $this->giveRoleToUser($row->user_id, $row->group_id, $row->group_level);
    }
  }

  public function giveRoleToUser($userId, $groupId, $level) {
    $userResult = $this->dataBaseObj->getUser($userId);
    $user = mysql_fetch_object($userResult);
    $userObj = user_load_by_name($user->user);
    $userRoles = $userObj->roles;
    // add visitor role 
    if ($level == 1) {
      $roleName = ForumManagement::$forumDictionary[$groupId][2];
    }
    // add member role
    else if ($level == 2) {
      $roleName = ForumManagement::$forumDictionary[$groupId][1];
    }
    // add manager role
    else if ($level == 7) {
      $roleName = ForumManagement::$forumDictionary[$groupId][0];
    }
    // add admin role
    else if ($level == 6) {
      $roleName = ForumManagement::$forumDictionary[$groupId][0];
    }
    else
      throw new Exception("Unknown level($level) for roles");
    if ($role = user_role_load_by_name($roleName)) {
      user_multiple_role_edit(array($userObj->uid), 'add_role', $role->rid);
    }
  }

  public function deleteUsers() {
    $result = $this->dataBaseObj->getUsers();
    while ($row = mysql_fetch_object($result)) {
      if (!empty($row->user) && $row->user != 'admin') {
        if (strpos($row->email, "eaudeweb") || strpos($row->email, "example"))
          continue;
        $userObj = user_load_by_name($row->user);
        if (!is_null($userObj))
          user_delete($userObj->uid);
      }
    }
  }

  private function grantPermissions($tid, $rid, $grant_view, $grant_update, $grant_delete, $grant_create) {
    db_query("INSERT INTO `forum_access` VALUES($tid,$rid,$grant_view,$grant_update,$grant_delete,$grant_create,0)");
  }

  public function addSubscriptionToUsers() {
    $result = $this->dataBaseObj->getUsers();
    while ($row = mysql_fetch_object($result)) {
      if ($row->alert_topics != NULL) {
        $this->addTopicAlerts($row);
        if (count($this->strangeUsers[$row->email]) > 1) {
          foreach ($this->strangeUsers[$row->email] as $uid) {
            if ($uid != $row->uid) {
              $duplicateUser = mysql_fetch_object($this->dataBaseObj->getUser($uid));
              if ($duplicateUser)
                $this->addTopicAlerts($duplicateUser);
            }
          }
        }
      }
      if ($row->alert_forums != NULL) {
        $this->addForumAlerts($row);
        if (count($this->strangeUsers[$row->email]) > 1) {
          foreach ($this->strangeUsers[$row->email] as $uid) {
            if ($uid != $row->uid) {
              $duplicateUser = mysql_fetch_object($this->dataBaseObj->getUser($uid));
              if ($duplicateUser)
                $this->addForumAlerts($duplicateUser);
            }
          }
        }
      }
    }
  }

  private function addTopicAlerts($user) {
    $alerts = explode(",", $user->alert_topics);
    $userObj = user_load_by_name($user->user);
    if (!$userObj)
      return;
    foreach ($alerts as $topicAlert) {
      $topic = mysql_fetch_object($this->dataBaseObj->getTopic(intval($topicAlert)));
      if (!$topic)
        continue;
      $topicNid = db_query("SELECT nid FROM `node` 
                        WHERE `title` = '{$topic->cname}'")->fetchField();
      if (empty($topicNid))
        continue;
      node_notify_subscribe($topicNid, $userObj->uid, $userObj->email, TRUE);
    }
  }

  private function addForumAlerts($user) {
    $alerts = explode(",", $user->alert_forums);
    $userObj = user_load_by_name($user->user);
    if (!$userObj)
      return;
    foreach ($alerts as $forumAlert) {
      $forum = mysql_fetch_object($this->dataBaseObj->getForum(intval($forumAlert)));
      if (is_null($forum)) {
        continue;
      }
      $result = db_query("SELECT * FROM `taxonomy_term_data` WHERE `name` = '{$forum->gname}'");
      if (!$result)
        continue;
      $result = $result->fetch();
      if (!$result)
        continue;
      $tid = $result->tid;
      $uid = $userObj->uid;
      db_query("INSERT INTO `subscriptions` VALUES(NULL,'node','tid',$tid,$uid,1,-1,1,1)");
    }
  }

}
