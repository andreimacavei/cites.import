<?php

class ForumManagement {
  private static $forumDictionary = array(
    11 => array("Feedback Manager", "Feedback Member", "Feedback Visitor"),
    16 => array("Plants Committee Manager", "Plants Committee Member", "Plants Commitee Visitor"),
    17 => array("Animals Committee Manager", "Animals Commitee Member", "Animal Commitee Visitor"),
    18 => array("Standing Committee Manager", "Standing Commitee Member", "Standing Commitee Visitor"),
    57 => array("Substantive Revision Manager", "Substantive Revision Member", "Substantive Revision Visitor"),
    58 => array("Private Sector Manager", "Private Sector Member", "Private Sector Visitor"),
    29 => array("Asian Region Manager", "Asian Region Member", "Asian Region Visitor"),
    30 => array("Management Authorities Manager", "Management Authorities Member", "Management Authorities Visitor"),
    31 => array("Scientific Authorities Manager", "Scientific Authorities Member", "Scientific Authorities Visitor"),
    33 => array("Enforcement Authorities Manager", "Enforcement Authorities Member", "Enforcement Authorities Visitor"),
    62 => array("Central & South America Manager", "Central & South America Member", "Central & South America Visitor"),
    35 => array("Africa Manager", "Africa Member", "Africa Visitor"),
    36 => array("Oceania Manager", "Oceania Member", "Oceania Visitor"),
    37 => array("North America Manager", "North America Member", "North America Visitor"),
    38 => array("Europe Manager", "Europe Member", "Europe Visitor"),
    39 => array("Wildlife Trade Manager", "Wildlife Trade Member", "Wildlife Trade Visitor"),
    64 => array("WG on criteria Manager", "WG on criteria Member", "WG on criteria Visitor"),
    51 => array("Finance & Budget Manager", "Finance & Budget Member", "Finance & Budget Visitor"),
    52 => array("CITES and livelihoods Manager", "CITES and livelihoods Member", "CITES and livelihoods Visitor"),
    54 => array("Purpose Codes WG Manager", "Purpose Codes WG Member", "Purpose Codes WG Visitor"),
    55 => array("Review of Resolutions WG Manager", "Review of Resolutions WG Member", "Review of Resolutions WG Visitor"),
    61 => array("E-commerce Manager", "E-commerce Member", "E-commerce Visitor"),
    65 => array("SC WG on Trade Manager", "SC WG on Trade Member", "SC WG on Trade Visitor"),
    66 => array("Tortoises & Freshwater Manager", "Tortoises & Freshwater Member", "Tortoises & Freshwater Visitor"),
    70 => array("Advisory WG on Review Manager", "Advisory WG on Review Member", "Advisory WG Visitor"),
    68 => array("Strategic Vision WG Manager", "Strategic Vision WG Member", "Strategic Vision WG Visitor"),
    69 => array("WG on the revision Manager", "WG on the revision Member", "WG on the revision Visitor"),
    71 => array("CITES logo Manager", "CITES logo Member", "CITES logo Visitor"),
    73 => array("Forum Announcements Manager", "Forum Announcements Member", "Forum Announcements Visitor"),
    56 => array("Trade Database Users Manager", "Trade Database Users Member", "Trade Databse User Visitor"),
    49 => array("Timber identification Manager", "Timber identification Member", "Timber identification Visitor")
  );
  private $forumVid;
  private $dataBaseObj;
  private $counter = 1;

  public function __construct(DatabaseInterface $databaseObj) {
    $this->dataBaseObj = $databaseObj;
    $this->forumVid = 0;
    $forum = taxonomy_vocabulary_machine_name_load('forums');
    $this->forumVid = $forum->vid;
  }

  public function addUsers() {
    $result = $this->dataBaseObj->getUsers();
    while ($row = mysql_fetch_object($result)) {
      //$this->insertUser($row);
      echo $row->user . " " . $row->email . " " . $row->firstname . " " . $row->lastname . PHP_EOL;
    
      $types = profile2_get_types();
      var_dump($types);
    }
  }

  /**
   * insert an user
   * @param $username
   * @param $password
   * @param $email
   */
  private function insertUser($user) {
    $fields = array(
      'name' => $user->user,
      'mail' => $user->email,
      'pass' => $user->real_pass,
      'status' => 1,
      'init' => $user->email,
      'roles' => array(
        DRUPAL_AUTHENTICATED_RID => 'authenticated user',
      ),
    );
    $account = user_save('', $fields);
    
  }

  private function addComment($post, $nodeId, $user) {
    $comment = new stdClass();
    $comment->nid = $nodeId; // nid of a node you want to attach a comment to
    $comment->cid = 0;
    $comment->pid = 0; // parent comment id, 0 if none
    $comment->uid = 1; // user's id, who left the comment
    $comment->created = strtotime($post->data);
    $comment->changed = $comment->created;
    $comment->created = time();
    $comment->is_anonymous = 0;
    $comment->status = COMMENT_PUBLISHED;
    $comment->language = LANGUAGE_NONE;
    $comment->subject = $post->pname;
    $comment->comment_body[$comment->language][0]['value'] = $post->description;
    $comment->comment_body[$comment->language][0]['format'] = 'filtered_html';

    $result = $this->dataBaseObj->getPostsFiles($post->post_id);
    try {
    while ($row = mysql_fetch_object($result)) {
      if (empty($row->filename))
        continue;
      if (!file_exists("/home/andrei/Desktop/cites.production.arhive/cites.production/forum/assets/files/" . $row->filename))
          continue;
      $fileName = "/home/andrei/Desktop/cites.production.arhive/cites.production/forum/assets/files/"
          . $row->filename;
      $file_path = drupal_realpath($fileName);
      $file = (object) array(
            'fid' => $this->counter,
            'display' => 1,
            'uid' => 1,
            'uri' => $file_path,
            'filemime' => file_get_mimetype($file_path),
            'status' => 1,
      );
      $this->counter++;
      $destinationPath = "public://privateFolder/forum_attachments/";
      echo $row->filename . PHP_EOL;
      if (file_exists($destinationPath . $row->filename)) {
        $uri = $destinationPath . $row->filename;
        $files = file_load_multiple(array(), array('uri' => $uri));
        $file = reset($files);
        $file->display = 1;
      }
      else {
        $file = file_copy($file, $destinationPath . $row->filename, FILE_EXISTS_REPLACE);
      }

      if (!is_null($file))
        $comment->field_comment_attachment[LANGUAGE_NONE][] = (array) $file;
    }
    comment_submit($comment); // saving a comment
    comment_save($comment);
    }
    catch(Exception $e) {
      echo $e->getMessage() . PHP_EOL ;
    }
    
 }

  private function addTopic($topic, $forumTaxonomyId) {
    $node = new stdClass();
    $title = $topic->cname;
    $encoding = mb_detect_encoding($title);
    if ($encoding === 'ISO-8859-1') {
      $title = iconv('ISO-8859-1', 'UTF-8', $title);
    }
    else if ($encoding === 'WINDOWS-1252') {
      $title = iconv('WINDOWS-1252', 'UTF-8', $title);
    }
    else if ($encoding != 'ASCII' && $encoding != 'LATIN-1') {
      $title = iconv('UTF-8', 'UTF-8', $title);
    }

    $node->title = "$title";
    $node->type = 'forum';   // Your specified content type
    $node->created = strtotime($topic->datetime);
    $node->changed = $node->created;
    $node->status = 1;       // To have published, else use 0
    $node->promote = 1;      // If you want promoted to front page, else use 0
    $node->sticky = 0;
    $node->format = 1;       // Filtered HTML
    $node->uid = 1;          // UID of content owner
    $node->language = LANGUAGE_NONE;
    $node->comment = COMMENT_NODE_OPEN;
    $node->taxonomy_forums[$node->language][0]['tid'] = $forumTaxonomyId;
    $result = $this->dataBaseObj->getPosts($topic->categ_id);
    node_save($node);
    while ($u = mysql_fetch_object($result)) {
      $user = $this->dataBaseObj->getUser($u->user_id);
      $this->addComment($u, $node->nid, $user);
    }
  }

  /**
   * add forum as taxonomy
   */
  private function addSingleForum($forum) {
    taxonomy_term_save((object) array(
          'vid' => $this->forumVid,
          'name' => $forum->gname, // "$forumName"
          'description' => ""
    ));
    $value = taxonomy_get_term_by_name($forum->gname);
    $val = reset($value)->tid;
    $topics = $this->dataBaseObj->getTopics($forum->group_id);
    while ($row = mysql_fetch_object($topics)) {
      $this->addTopic($row, $val);
    }
  }

  public function addForums() {
    $forums = $this->dataBaseObj->getForums();
    while ($row = mysql_fetch_object($forums)) {
      $this->addSingleForum($row);
      //echo $row->group_id . " ";
      //$this->createRoles($row->group_id);
    }
  }

  public function createRoles($id) {
    // create Forum Manager Role
    $managerRoleName = ForumManagement::$forumDictionary[$id][0];
    $role = new stdClass();
    $role->name = $managerRoleName;
    user_role_save($role);
    $role = user_role_load_by_name($managerRoleName);
    $manager_permissions = array(
      'administer blocks' => TRUE, 
      'access dashboard' => TRUE,
      'administer advanced forum' => TRUE,
      'view forum statistics' => TRUE
    );
    user_role_change_permissions($role->rid, $manager_permissions);
  
    // create Forum Member role
    $memberRoleName = ForumManagement::$forumDictionary[$id][1];
    $role = new stdClass();
    $role->name = $memberRoleName;
    user_role_save($role);
    $role = user_role_load_by_name($memberRoleName);
    $member_permissions = array(
      'administer blocks' => TRUE, 
      'access dashboard' => TRUE,
      'administer advanced forum' => TRUE,
      'view forum statistics' => TRUE
    );
    user_role_change_permissions($role->rid, $member_permissions);
    
    
    // create Forum Visitor role
    $visitorRoleName = ForumManagement::$forumDictionary[$id][2];
    $role = new stdClass();
    $role->name = $visitorRoleName;
    user_role_save($role);
    $role = user_role_load_by_name($visitorRoleName);
    $visitor_permissions = array(
      'administer blocks' => TRUE, 
      'access dashboard' => TRUE,
      'administer advanced forum' => TRUE,
      'view forum statistics' => TRUE
    );
    user_role_change_permissions($role->rid, $visitor_permissions);
  }
  
  public function deleteRoles(){
    foreach(ForumManagement::$forumDictionary as $forumRoles) {
      foreach ($forumRoles as $role) {
        user_role_delete($role);
      }
    }
  }
}